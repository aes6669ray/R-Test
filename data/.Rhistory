1:10
plot(rnorm(12), rnorm(12))
plot(rnorm(12), rnorm(12), pch=16, col=3)
setwd("C:/Users/zeldan/Desktop/Projects/Multivariate/Data")
CS <- read.table(
file = "HomePrice.txt",       # Case-Schiller home prices
header = TRUE, row.names  = 1)
colnames(CS) <- 2001:2011       # columns are years
CS <- log(CS/100)               # log of data values
dc <- dim(CS)
detr <- CS - t(matrix(colMeans(CS), dc[2], dc[1]))
500 * 200
nS <- c(12, 28)
pS <- c(.9, .15)
rS <- ph2crit( n = nS, p = pS, pearly = .1, alpha = .1)
ps <- ph2reject(p = pS, n = nS, r = rS)
pe <- ph2early(p = pS, n = nS, r = rS)
pr <- ph2reject(p = c(pS[1], .4), n = nS, r = rS)
print(c(nS, rS, ps, pe, pr), digits = 2)
rm(list = ls())
#  List of functions defined here:
# ph2crit( n, p, pearly = .1, alpha = .1)  # Find critical values (r1, r2)
# ph2dspb(p, s, t)     # Doubly stopped binomial distribution mass function
# ph2early( p, n, r)   #  Probability of stopping early
# ph2Eearly(p, n1, r1) # Expected sample size for decision to continue to Stage 2
# ph2Ess( p, n, r)     # Expected sample size
# ph2reject(p, n, r)   #  Probability of rejecting the null hypothesis
# ph2valid(p,n,r)      # check validity of parameter values
# Dependencies:
library(clinfun)       # For Simon, Two-stage Phase II designs
#############################################################
# Test for integer: From the R Help file
is.wholenumber <-
function(x, tol = .Machine$double.eps ^ 0.5)
abs(x - round(x)) < tol
# # # # # # # # # # # # # # # # # # # # # # # # # # #
is.wholenumber(5.0000)          # Not a test of integer
is.wholenumber(5 + 1.0e-7)      # Small but not whole number
is.wholenumber(5 + 1.0e-8)      # Small enough to be whole number
#############################################################
ph2valid <- function(p,n,r)  # Check validity of parameter values
{
#  Must have:  0 <= p2 <= p1 <= 1
if( length(p) != 2 ) return(FALSE)
if( p[1] > 1 | p[2] < 0 | p[1] < p[2] )return(FALSE)
#  The two n's must be non-negative integers
if( length(n) != 2) return(FALSE)
if(min(n) < 0) return(FALSE)
if(!is.wholenumber(n[1])
|| !is.wholenumber(n[2])) return(FALSE)
# Must have: 0 <= r1 <= n1
if(length(r) != 2) return(FALSE)
if( r[1] < 0) return(FALSE)
if( r[1] > n[1]) return(FALSE)
# Must have: 0 <= r2 <= n1+n2
if(r[2] < 0) return(FALSE)
if(r[2] > sum(n)) return(FALSE)
if(!is.wholenumber(r[1])
|| !is.wholenumber(r[2])) return(FALSE)
TRUE               # Valid parameter values
}
# # # # # # # # Test Validity of parameters
# Test ph2valid in the middle of the ranges:
ph2valid(p = c(.2, .1), n = c(10, 10), r = c(5, 5))  # TRUE
# Test validity at the boundaries:
ph2valid(p = c(.2, .2), n = c(10, 10), r = c(5, 5))  # TRUE: p1=p1
ph2valid(p = c(.0, .0), n = c(10, 10), r = c(5, 5))  # TRUE: p1=p2=0
ph2valid(p = c( 1,  1), n = c(10, 10), r = c(5, 5))  # TRUE: p1=p2=1
ph2valid(p = c(.2, .1), n = c(0,  10), r = c(0, 5))  # TRUE: r1=n1=0
ph2valid(p = c(.2, .1), n = c(10, 0),  r = c(5, 6))  # TRUE: n2=0
ph2valid(p = c(.2, .1), n = c(10, 10), r = c(5, 20)) # TRUE: r2=n1+n2
ph2valid(p = c(.2, .1), n = c(10, 10), r = c(0, 5))  # TRUE: r1=0
ph2valid(p = c(.2, .1), n = c(10, 10), r = c(5, 0))  # TRUE: r2=0
# Test invalid cases:
ph2valid(p =    .2,      n = c(10, 10), r = c(5, 5))  # FALSE: wrong dimensions
ph2valid(p = c( .2, .3), n =   10,      r = c(5, 5))  # FALSE: wrong dimensions
ph2valid(p = c( .2, .3), n = c(10, 10), r =   5    )  # FALSE: wrong dimensions
ph2valid(p = c( .2, .3), n = c(10, 10), r = c(5, 5))  # FALSE: p2 > p1
ph2valid(p = c(-.1, .3), n = c(10, 10), r = c(5, 5))  # FALSE: p1 < 0
ph2valid(p = c(1.2, .3), n = c(10, 10), r = c(5, 5))  # FALSE: p1 > 1
ph2valid(p = c(.2, -.1), n = c(10, 10), r = c(5, 5))  # FALSE: p2 < 0
ph2valid(p = c(.2, 1.3), n = c(10, 10), r = c(5, 5))  # FALSE: p2 > 1
ph2valid(p = c(.2,  .1), n = c(-1, 10), r = c(5, 5))  # FALSE: n1 < 0
ph2valid(p = c(.2,  .1), n = c(10, -1), r = c(5, 5))  # FALSE: n1 < 0
ph2valid(p = c(.2,  .1), n = c(1.2, 1), r = c(5, 5))  # FALSE: n1 not integer
ph2valid(p = c(.2,  .1), n = c(10,1.2), r = c(5, 5))  # FALSE: n2 not integer
ph2valid(p = c(.2,  .1), n = c(10, 10), r = c(-1, 5)) # FALSE: r1 < 0
ph2valid(p = c(.2,  .1), n = c(10, 10), r = c(15, 5)) # FALSE: r1 > n1
ph2valid(p = c(.2,  .1), n = c(10, 10), r = c(5, 35)) # FALSE: r2 > n1+n2
ph2valid(p = c(.2,  .1), n = c(10, 10), r = c(5.1, 5))# FALSE: r1 not integer
ph2valid(p = c(.2,  .1), n = c(10, 1.2),r = c(5, 5.1))# FALSE: r2 not integer
######################################################
ph2reject <- function(p, n, r)
# Expression (2) in the paper
# Input: (p1,p2), (n1,n2), (r1,r2)
# Returns: Probability of rejecting the null hypothesis
{
# check validity of parameter values
if ( ! ph2valid(p, n, r))
{
warning("Invalid parameter values (PhII)")
return (NaN)
}
reject <- 0
# Loop on X1 = number of Stage 1 successes
lowx1 <- max(r[1], r[2] - n[2])    # lower limit for X1
for (x1 in lowx1 : n[1])
{
t1 <- dbinom(x1, n[1], p[1]) # binomial probability of X1
# Loop on X12 = Stage 1 successes who become Stage 2 successes
lowx12 <- max(0, r[2] - n[2])  # lower limit for X12
for (x12 in lowx12 : x1)       # X12 conditional on X1
{
t2 <- dbinom(x12, x1, p[2] / p[1])  #  Prob of X12 given X1
# Loop on X2 = Stage 2 successes
lowx2 <- max(0, r[2] - x12) # lower limit for X2
for (x2 in lowx2 : n[2])
{
reject <- reject + t1 * t2 * dbinom(x2, n[2], p[2])
}
}
}
reject
}
# # # # Test ph2reject
ph2reject(p = c( .8, .2), n = c(8, 28), r = c(5, 11)) # Test: 0.08623555
ph2reject(p = c( .8, .2), n = c(12, 24), r = c(8, 11)) # Test: 0.08577967
ph2reject(p = c( .8, .2), n = c(12, 24), r = c(0, 11)) # Test: binomial design
1 - pbinom(10, 36, .2)             #  Confirm binomial: 0.08891278
################################################################
ph2early <- function( p, n, r)
#  Probability of stopping early
#  Returns Pr[ X_1 < r_1 ]
{
if(length(p) == 2) p1 <- p[1] # p can be vector or scalar
else p1 <- p
if(length(n) == 2) n1 <- n[1] # n can be vector or scalar
else n1 <- n
if(length(r) == 2) r1 <- r[1] # r can be vector or scalar
else r1 <- r
if(n1 <= 0) return(0)    # no patients -> no event
if(r1 <= 0) return(0)    # avoids some rounding errors
if(r1 > n1) return(1)    # always stop early
j <- min(r1, n1) : n1    # range of X1
ph2early <- 1 - sum(dbinom(j, n1, p1))
return(ph2early)
}
# # # #
ph2early(p = .8, n = 25, r = 18) # .1091228, Test: one p, one n
ph2early(p = c(.8, .2), n = c(25, 9), r = 18)  # .1091228, test 2 n's, 2 p's
ph2early(p = .8, n = 5, r = 3)  # Design A: .05792
ph2early(p = .8, n = 8, r = 5)  # Design B: .0562816
ph2early(p = .8, n = 11, r = 7)  # Design C: .05040957
ph2early(p = .8, n = 12, r = 8)  # Design D: .0725555
########################################################
ph2crit <- function( n, p, pearly = .1, alpha = .1)
# Find critical values (r1, r2)
# Find r1 so that the probability of early stopping
# is less than or equal to pearly.
# Find r2 from Binomial model with no early stopping,
# and significance level alpha.
{                    # check validity of parameter values
if (!ph2valid(p, n, r = c(0, 0)) ||
pearly < 0 || pearly > 1 || alpha < 0 || alpha > 1)
{
warning("Invalid parameter values (PhII)")
return (NaN)
}
r2 <- 1 + qbinom(1 - alpha,
sum(n), p[2])          # binomial critical value
for (j in 0 : n[1])
{
if (ph2early(p, n, r = c(j, 0)) > pearly)
return(c(max(j - 1, 0), r2))
}
return (c(n[1], r2))         # Hmmm. Didn't add up to 1
}
# # # # # # Test validity of input parameters
ph2crit( n = 5, p = c(.8, .2), pearly = .1, alpha = .1)  # Fail: one n
ph2crit( n = c(5, 15), p = .5, pearly = .1, alpha = .1)  # Fail: one p
ph2crit( n = c(5, 15), p = c(.8, .2), pearly = -.5, alpha = .1) # Fail: pearly < 0
ph2crit( n = c(5, 15), p = c(.8, .2), pearly = 1.5, alpha = .1) # Fail: pearly > 1
ph2crit( n = c(5, 15), p = c(.8, .2), pearly = .1, alpha = -.2) # Fail: alpha < 0
ph2crit( n = c(5, 15), p = c(.8, .2), pearly = .1, alpha = 2.1) # Fail: pearly > 1
# Test with valid input parameters:
ph2crit( n = c( 5, 31), p = c(.8,.2), pearly = .1, alpha = .1) # Design A: 3 11
ph2crit( n = c( 8, 28), p = c(.8,.2), pearly = .1, alpha = .1) # Design B: 5 11
ph2crit( n = c(11, 25), p = c(.8,.2), pearly = .1, alpha = .1) # Design C: 7 11
ph2crit( n = c(12, 24), p = c(.8,.2), pearly = .1, alpha = .1) # Design D: 8 11
############
nS <- c(12, 28)
pS <- c(.9, .15)
rS <- ph2crit( n = nS, p = pS, pearly = .1, alpha = .1)
ps <- ph2reject(p = pS, n = nS, r = rS)
pe <- ph2early(p = pS, n = nS, r = rS)
pr <- ph2reject(p = c(pS[1], .4), n = nS, r = rS)
print(c(nS, rS, ps, pe, pr), digits = 2)
nS <- c(12, 28)              #  n1, n2
pS <- c(.9, .15)             #  p1, p2
rS <- ph2crit( n = nS, p = pS, pearly = .1, alpha = .1)
ps <- ph2reject(p = pS, n = nS, r = rS)
pe <- ph2early(p = pS, n = nS, r = rS)
pr <- ph2reject(p = c(pS[1], .3), n = nS, r = rS)
print(c(nS, rS, ps, pe, pr), digits = 2)
nS <- c(12, 28)              #  n1, n2
pS <- c(.9, .15)             #  p1, p2
rS <- ph2crit( n = nS, p = pS, pearly = .1, alpha = .1)
ps <- ph2reject(p = pS, n = nS, r = rS)
pe <- ph2early(p = pS, n = nS, r = rS)
pr <- ph2reject(p = c(pS[1], .32), n = nS, r = rS)
print(c(nS, rS, ps, pe, pr), digits = 2)
rS
rS <- c(8, 10)
ps <- ph2reject(p = pS, n = nS, r = rS)
pe <- ph2early(p = pS, n = nS, r = rS)
pr <- ph2reject(p = c(pS[1], .32), n = nS, r = rS)
print(c(nS, rS, ps, pe, pr), digits = 2)
rS <- c(10, 10)
ps <- ph2reject(p = pS, n = nS, r = rS)
pe <- ph2early(p = pS, n = nS, r = rS)
pr <- ph2reject(p = c(pS[1], .32), n = nS, r = rS)
print(c(nS, rS, ps, pe, pr), digits = 2)
